/**
* Copyright 2019 H-UI [ @author Mac.Manon @email fastapp@139.com ]
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use
* this file except in compliance with the License.  You may obtain a copy of the
* License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed
* under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
* CONDITIONS OF ANY KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations under the License.
*
*/

<import name="toast" src="../feedback/c_toast"></import>
<import name="pickimage" src="../media/c_pickimage"></import>
<import name="takephoto" src="../media/c_takephoto"></import>
<import name="share" src="../advance/c_share"></import>
<import name="h5" src="../text/c_h5"></import>
<template>
    <div>
        <text if="{{supportAI}}" class="icon {{color}}" style="{{compSize}}" onclick="handleShow">&#xe76e;</text>
        <div if="{{isShow}}" class="mask" style="{{maskHeight}}">
            <div class="mask-top {{bgColor}}">
                <div>
                    <pickimage id="pick" size="85" color="white" h-style="padding:10px;"></pickimage>
                    <takephoto id="takephoto" size="75" color="white" h-style="padding:10px;"></takephoto>
                </div>
                <div>
                    <text id="editImage" class="icon icon-tool white" onclick="handleEditImage">&#xe7c7;</text>
                    <text id="scene" class="icon icon-tool white" onclick="doDetectScene">&#xe750;</text>
                    <text id="label" class="icon icon-tool white" onclick="doDetectLabel">&#xe7a9;</text>
                </div>
                <div>
                    <share image="{{photoUri}}" color="white" size="75"></share>
                </div>
            </div>
            <div class="mask-image">
                <image src="{{photoUri}}"></image>
            </div>
            <div if="{{photoUri === ''}}" class="mask-tip">
                <h5 text="使用小贴士："></h5>
                <div class="mask-tip-item">
                    <text class="icon icon-tool warning">&#xe813;</text>
                    <text>从手机相册中选取图片。</text>
                </div>
                <div class="mask-tip-item">
                    <text class="icon icon-tool warning">&#xe84b;</text>
                    <text>调用相机即时拍摄。</text>
                </div>
                <div class="mask-tip-item">
                    <text class="icon icon-tool warning">&#xe7c7;</text>
                    <text>图片编辑，可对图片进行裁剪、旋转操作。</text>
                </div>
                <div class="mask-tip-item">
                    <text class="icon icon-tool warning">&#xe750;</text>
                    <text>场景检测，通过识别图像内容所属场景，对输入图片进行快速分类。</text>
                </div>
                <div class="mask-tip-item">
                    <text class="icon icon-tool warning">&#xe7a9;</text>
                    <text>图片分类标签，基于深度学习方法，识别图片中物体、场景、行为等信息，返回对应标签信息，如：花、鸟、鱼、虫、汽车、建筑等等。</text>
                </div>
                <div class="mask-tip-item">
                    <text class="icon icon-tool warning">&#xe78c;</text>
                    <text>分享图片。</text>
                </div>
            </div>
            <div if="{{!hideBottom}}" class="mask-bottom" onclick="handleShow">
                <text class="icon icon-tool white">&#xe6ec;</text>
            </div>
        </div>
        <toast id="toast"></toast>
    </div>
</template>

<style lang="less">
    @import '../../../styles/color.less';
    @import '../../../styles/bg-color.less';

    @font-face {
        font-family: hui;
        src: url('https://h-ui.obs.cn-south-1.myhuaweicloud.com/font/hui.ttf');
    }

    .mask{
        position: fixed;
        left: 0;
        right: 0;
        top: 0;
        width: 100%;
        height: 100%;
        flex-direction: column;
        background-color: rgba(0, 0, 0, 0.8);
        &-top{
            position: fixed;
            top: 0;
            width: 100%;
            padding: 0 21px;
            justify-content: space-between;
            height:120px;
        }
        &-image{
            width: 100%;
            height: 100%;
            padding: 0 33px;
            align-items: center;
            justify-content: center;
        }
        &-tip{
            position: fixed;
            top:240px;
            bottom: 240px;
            left:33px;
            right:33px;
            width: 100%;
            height: 100%;
            padding: 10px;
            flex-direction: column;
            background-color: #ffffff;
            border-width: 2px;
            border-radius: 8px;
            border-color: @color-border;
            &-item{
                align-items: center;
                margin-bottom: 15px;
            }
        }
        &-bottom{
            position: fixed;
            width: 100%;
            bottom: 0;
            height: 120px;
            justify-content: center;
        }
    }

    .icon{
        font-family: hui;
        padding: 12px;
        &-tool{
            font-size: 55px;
        }
    }

    image {
        width: 100%;
        border-radius: 8px;
    }
</style>

<script>
    import ai from '@system.ai'
    import image from '@system.image'
    import request from '@system.request'

    export default {
        props: {
            id: {},
            size: {
                default: '45'
            },
            color: {
                default: 'sub'
            },
            bgColor: {
                default: 'bg-content'
            },
            uri: {
                default: ''
            },
            show:{
                default: false
            },
            hideBottom:{
                default: false
            }
        },

        data() {
            return {
                supportAI: false,
                isShow: this.show,
                photoUri: this.uri
            }
        },

        onInit(){
            let _this = this
            ai.canIUse({
                success: function (data) {
                    if(!data.canUse){
                        _this.$child('toast').showToast({
                            text: '您的设备不支持AI',
                            icon: 'warning'
                        })
                    }else{
                        _this.supportAI = true
                    }
                },
                fail: function (data, code) {
                    console.log("handling fail, code: " + code)
                },
                complete: function () {
                    console.log("handling complete")
                }
            })

            //如果是远程图片，则先保存到本地
            if(_this.uri.startsWith('http')){
                request.download({
                    url: _this.uri,
                    success:function(data){
                        // 下载文件，存储在本地
                        request.onDownloadComplete({
                            token:data.token,
                            success: function (ret) {
                                _this.photoUri = ret.uri;
                            },
                            fail: function () {
                                _this.$child('toast').showToast({
                                    text: '图片下载失败',
                                    icon: 'warning'
                                })
                            }
                        })
                    },
                    fail: function() {
                        _this.$child('toast').showToast({
                            text: '图片下载失败',
                            icon: 'warning'
                        })
                    }
                })
            }

            _this.$on('pick_dispatchEvt',_this.dispatchPickEvt)
            _this.$on('takephoto_dispatchEvt',_this.dispatchTakePhotoEvt)
        },
        dispatchPickEvt(evt) {
            this.photoUri = evt.detail.pictureUrl
        },
        dispatchTakePhotoEvt(evt) {
            this.photoUri = evt.detail.photoUrl
        },

        computed: {
            compSize() {
                return 'font-size: ' + this.size + ';'
            },
            maskHeight() {
                return this.hideBottom ? 'bottom:130px;' : 'bottom:0;'
            }
        },

        handleShow() {
            this.isShow = !this.isShow
        },

        //图片裁剪
        handleEditImage(){
            let _this = this
            image.editImage({
                uri: _this.photoUri,
                success: function(data) {
                    _this.photoUri = data.uri
                    _this.$child('toast').showToast({
                        text: '图片已裁剪',
                        icon: 'ok'
                    })
                },
                fail: function(data, code) {
                    _this.$child('toast').showToast({
                        text: '图片裁剪失败',
                        icon: 'warning'
                    })
                }
            })
        },

        //场景检测
        doDetectScene() {
            let _this = this
            ai.detectScene({
                uri: _this.photoUri,
                success: function (data) {
                    var value =  _this.$t('ai_detect_scene.' + data.type)
                    _this.$child('toast').showToast({
                        text: value
                    })

                    _this.$dispatch(_this.id + '_dispatchSceneEvt', {
                        value: value
                    })
                },
                fail: function () {
                    _this.$child('toast').showToast({
                        text: '场景检测失败',
                        icon: 'warning'
                    })
                }
            })
        },

        //图片分类标签
        doDetectLabel() {
            let _this = this
            ai.detectLabel({
                uri: _this.photoUri,
                success: function (data) {
                    var category = Number(data.category)
                    var categoryProbability = Number(data.categoryProbability)
                    var labelProbability = Number(data.labelContent[0].probability)
                    var labelId = Number(data.labelContent[0].labelId)

                    //华为官方文档未定义 容错处理
                    if(category < 0 || category > 15){
                        category = -2
                    }

                    if(labelId < 0 || labelId > 125){
                        labelId = -2
                    }else{
                        switch (labelId){
                            case 17:
                            case 21:
                            case 22:
                            case 23:
                            case 30:
                            case 33:
                            case 48:
                            case 61:
                            case 64:
                            case 65:
                            case 75:
                            case 82:
                            case 87:
                            case 90:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 119:
                            case 122://华为官方文档未定义
                                labelId = -2
                                break
                            default:
                                break
                        }
                    }

                    var categoryText = _this.$t('ai_detect_label_category.' + category)
                    var categoryProbabilityText = (categoryProbability === -1) ? _this.$t('message.unknown') : (categoryProbability * 100).toFixed(2) + '%'
                    var labelText = _this.$t('ai_detect_label_content.' + labelId)
                    var labelProbabilityText = (labelProbability === -1) ? _this.$t('message.unknown') : (labelProbability * 100).toFixed(2) + '%'

                    _this.$child('toast').showToast({
                        text: categoryText + ' > ' + labelText
                    })

                    var item = {
                        category: categoryText,
                        categoryProbability: categoryProbabilityText,
                        label: labelText,
                        labelProbability: labelProbabilityText
                    }

                    _this.$dispatch(_this.id + '_dispatchLabelEvt', {
                        value: item
                    })
                },
                fail: function () {
                    _this.$child('toast').showToast({
                        text: '图片分类失败',
                        icon: 'warning'
                    })
                }
            })
        }
    }
</script>
