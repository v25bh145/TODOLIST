/**
* Copyright 2019 H-UI [ @author Mac.Manon @email fastapp@139.com ]
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use
* this file except in compliance with the License.  You may obtain a copy of the
* License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed
* under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
* CONDITIONS OF ANY KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations under the License.
*
*/

<import name="toast" src="../feedback/c_toast"></import>
<import name="share" src="../advance/c_share"></import>
<template>
    <div>
        <text if="{{supportAI}}" class="icon {{color}}" style="{{compSize}}" onclick="handleShow">&#xe84c;</text>
        <div if="{{isShow}}" class="mask" style="{{maskHeight}}">
            <div class="mask-top {{bgColor}}">
                <div>
                    <text class="white">语音识别</text>
                </div>
                <div>
                    <text id="copy" class="icon icon-tool white" onclick="handleCopy">&#xe79c;</text>
                    <share text="{{text}}" color="white" size="75"></share>
                </div>
            </div>
            <div class="mask-text">
                <textarea id="ai_textarea" class="text-content" placeholder="点击麦克风开始语音识别" onchange="handleChange" onfocus="handleFocus">{{text}}</textarea>
                <text if="{{supportAI}}" class="icon icon-lg {{compColor}}" onclick="handleClick">&#xe84c;</text>
            </div>
            <div if="{{!hideBottom}}" class="mask-bottom" onclick="handleShow">
                <text class="icon icon-tool white">&#xe6ec;</text>
            </div>
        </div>
        <toast id="toast"></toast>
    </div>
</template>

<style lang="less">
    @import '../../../styles/color.less';
    @import '../../../styles/bg-color.less';

    @font-face {
        font-family: hui;
        src: url('https://h-ui.obs.cn-south-1.myhuaweicloud.com/font/hui.ttf');
    }

    .mask{
        position: fixed;
        left: 0;
        right: 0;
        top: 0;
        width: 100%;
        height: 100%;
        flex-direction: column;
        background-color: rgba(0, 0, 0, 0.8);
        &-top{
            position: fixed;
            top: 0;
            width: 100%;
            padding: 0 21px;
            justify-content: space-between;
            height:120px;
        }
        &-text{
            position: fixed;
            left: 0;
            right: 0;
            top: 120px;
            bottom:130px;
            width: 100%;
            height: 100%;
            padding: 0 33px;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        &-bottom{
            position: fixed;
            width: 100%;
            bottom: 0;
            height: 120px;
            justify-content: center;
        }
    }

    .icon{
        font-family: hui;
        padding: 12px;
        &-tool{
            font-size: 55px;
        }
        &-normal{
            font-size: 45px;
        }
        &-lg{
            font-size: 200px;
        }
    }
    .text-content{
        padding: 10px;
        font-size: 31px;
        width: 100%;
        height: 600px;
        margin-bottom: 50px;
        background-color: #ffffff;
        border-width: 2px;
        border-radius: 8px;
        border-color: @color-border;
    }
    .pick{
        padding: 10px;
    }
    image {
        width: 100%;
        border-radius: 8px;
    }
</style>

<script>
    import ai from '@system.ai'
    import clipboard from '@system.clipboard'

    export default {
        props: {
            size: {
                default: 55
            },
            color: {
                default: 'sub'
            },
            activeColor: {
                default: 'info'
            },
            bgColor: {
                default: 'bg-content'
            },
            show:{
                default: false
            },
            hideBottom:{
                default: false
            },
            copyWithHide:{
                default: false
            }
        },

        data() {
            return {
                supportAI: false,
                isShow: this.show,
                status: false,
                current:0,
                text: ''
            }
        },

        onInit(){
            let _this = this
            ai.canIUse({
                success: function (data) {
                    if(!data.canUse){
                        _this.$child('toast').showToast({
                            text: '您的设备不支持AI',
                            icon: 'warning'
                        })
                        _this.isShow = false
                    }else{
                        _this.supportAI = true
                    }
                },
                fail: function (data, code) {
                    console.log("handling fail, code: " + code)
                },
                complete: function () {
                    console.log("handling complete")
                }
            })
        },

        computed: {
            compSize() {
                return 'font-size: ' + this.size + ';'
            },
            compColor() {
                return this.status ? this.activeColor : 'white'
            },
            maskHeight() {
                return this.hideBottom ? 'bottom:130px;' : 'bottom:0;'
            }
        },

        handleShow() {
            this.isShow = !this.isShow
        },


        handleClick() {
            if(!this.status){
                this.start()
            }else{
                this.cancel()
            }
        },

        handleFocus(evt) {
            let _this = this
            //获得焦点位置
            _this.$element('ai_textarea').getSelectionRange({
                callback: function (start, end) {
                    _this.current = start
                }
            })
        },


        handleChange(e) {
            this.text = e.value
            let _this = this
            //获得焦点位置
            _this.$element('ai_textarea').getSelectionRange({
                callback: function (start, end) {
                    _this.current = start
                }
            })
        },


        /**
         * 开始语音识别
         */
        start() {
            let _this = this
            _this.status = true
            ai.startRecognize({
                fontTime: 1000,
                backTime: 2000,
                totalTime: 20000,
                success: function (data) {
                    var word = data.result[0].word

                    var text1 = _this.text.substr(0, _this.current)
                    var text2 = _this.text.substr(_this.current, _this.text.length - _this.current)
                    _this.text = text1 + word + text2

                    _this.current = text1.length + word.length

                    _this.$element('ai_textarea').focus({focus: false});

                    _this.$dispatch('aiVoice_dispatchEvt', {
                        value: {
                            targetId: _this.targetId,
                            pinyin: data.result[0].pinyin,
                            word: data.result[0].word
                        }
                    })
                    _this.stop()
                },
                fail: function (data, code) {
                    _this.cancel()
                    _this.$child('toast').showToast({
                        text: '语音识别失败',
                        icon: 'warning'
                    })
                }
            })
        },

        /**
         * 停止语音识别
         * 停止语音识别是指引擎停止对用户声音的采集，而不是销毁语音识别流程，停止语音识别之后引擎会继续执行startRecognize的onEndOfSpeech，success，onEnd等回调
         */
        stop(){
            let _this = this
            ai.stopRecognize({
                success: function () {
                    _this.status = false
                },
                fail: function (data, code) {
                    _this.$child('toast').showToast({
                        text: '未能停止识别',
                        icon: 'warning'
                    })
                }
            })
        },

        /**
         * 取消语音识别
         * 取消语音识别直接终止语音识别过程，引擎不再对用户声音进行识别。
         */
        cancel(){
            let _this = this
            ai.cancelRecognize({
                success: function () {
                    _this.$child('toast').showToast({
                        text: '取消语音识别'
                    })
                },
                complete: function () {
                    _this.status = false
                }
            })
        },

        //复制文字到剪贴板
        handleCopy() {
            clipboard.set({
                text: this.text
            })

            this.$child('toast').showToast({
                text: '已复制到剪贴板',
                icon: 'ok'
            })

            if(this.copyWithHide){
                this.isShow = false
            }
        }
    }
</script>
