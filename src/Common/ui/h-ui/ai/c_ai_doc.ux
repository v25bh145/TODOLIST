/**
* Copyright 2019 H-UI [ @author Mac.Manon @email fastapp@139.com ]
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use
* this file except in compliance with the License.  You may obtain a copy of the
* License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed
* under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
* CONDITIONS OF ANY KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations under the License.
*
*/

<import name="toast" src="../feedback/c_toast"></import>
<import name="pickimage" src="../media/c_pickimage"></import>
<import name="takephoto" src="../media/c_takephoto"></import>
<import name="share" src="../advance/c_share"></import>
<import name="h5" src="../text/c_h5"></import>
<template>
    <div>
        <text if="{{supportAI}}" class="icon {{color}}" style="{{compSize}}" onclick="handleShow">&#xe7ac;</text>
        <div if="{{isShow}}" class="mask" style="{{maskHeight}}">
            <div class="mask-top {{bgColor}}">
                <div>
                    <pickimage id="pick" size="85" color="white" h-style="padding:10px;"></pickimage>
                    <takephoto id="takephoto" size="75" color="white" h-style="padding:10px;"></takephoto>
                </div>
                <div>
                    <!--<text id="refineDoc" class="icon icon-tool white" onclick="handleRefineDoc">&#xe7c9;</text>-->
                    <text id="editImage" class="icon icon-tool white" onclick="handleEditImage">&#xe7c7;</text>
                    <text id="detectText" class="icon icon-tool white" onclick="handleDetectText">&#xe7bf;</text>
                </div>
                <div>
                    <text if="{{!showText}}" id="save" class="icon icon-normal white" onclick="handleSave">&#xe7b7;</text>
                    <share if="{{!showText}}" image="{{photoUri}}" color="white" size="75"></share>

                    <text if="{{showText}}" id="copy" class="icon icon-tool white" onclick="handleCopy">&#xe79c;</text>
                    <share if="{{showText}}" text="{{text}}" color="white" size="75"></share>
                </div>
            </div>
            <div class="mask-image">
                <image if="{{!showText}}" src="{{photoUri}}"></image>
                <textarea if="{{showText}}" class="text-content" >{{text}}</textarea>
            </div>
            <div if="{{photoUri === '' && text === ''}}" class="mask-tip">
                <h5 text="使用小贴士："></h5>
                <div class="mask-tip-item">
                    <text class="icon icon-tool warning">&#xe813;</text>
                    <text>从手机相册中选取图片。</text>
                </div>
                <div class="mask-tip-item">
                    <text class="icon icon-tool warning">&#xe84b;</text>
                    <text>调用相机即时拍摄。</text>
                </div>
                <div class="mask-tip-item">
                    <text class="icon icon-tool warning">&#xe7c7;</text>
                    <text>图片编辑，可对图片进行裁剪、旋转操作。</text>
                </div>
                <div class="mask-tip-item">
                    <text class="icon icon-tool warning">&#xe7bf;</text>
                    <text>提取图片中的文字信息，OCR光学字符识别(Optical Character Recognition)。</text>
                </div>
                <div class="mask-tip-item">
                    <text class="icon icon-normal warning">&#xe7b7;</text>
                    <text>保存图片。</text>
                </div>
                <div class="mask-tip-item">
                    <text class="icon icon-tool warning">&#xe79c;</text>
                    <text>将文字复制到剪贴板，这样即时切换界面或进入其它App，都可以粘贴相应文字。</text>
                </div>
                <div class="mask-tip-item">
                    <text class="icon icon-tool warning">&#xe78c;</text>
                    <text>当面板中是图片时，分享图片；如果面板中是已提取出的文字，则分享文字。</text>
                </div>
            </div>
            <div if="{{!hideBottom}}" class="mask-bottom" onclick="handleShow">
                <text class="icon icon-tool white">&#xe6ec;</text>
            </div>
        </div>
        <toast id="toast"></toast>
    </div>
</template>

<style lang="less">
    @import '../../../styles/color.less';
    @import '../../../styles/bg-color.less';

    @font-face {
        font-family: hui;
        src: url('https://h-ui.obs.cn-south-1.myhuaweicloud.com/font/hui.ttf');
    }

    .mask{
        position: fixed;
        left: 0;
        right: 0;
        top: 0;
        width: 100%;
        height: 100%;
        flex-direction: column;
        background-color: rgba(0, 0, 0, 0.8);
        &-top{
            position: fixed;
            top: 0;
            width: 100%;
            padding: 0 21px;
            justify-content: space-between;
            height:120px;
        }
        &-image{
            width: 100%;
            height: 100%;
            padding: 0 33px;
            align-items: center;
            justify-content: center;
        }
        &-tip{
            position: fixed;
            top:240px;
            bottom: 240px;
            left:33px;
            right:33px;
            width: 100%;
            height: 100%;
            padding: 10px;
            flex-direction: column;
            background-color: #ffffff;
            border-width: 2px;
            border-radius: 8px;
            border-color: @color-border;
            &-item{
                align-items: center;
                margin-bottom: 15px;
            }
        }
        &-bottom{
            position: fixed;
            width: 100%;
            bottom: 0;
            height: 120px;
            justify-content: center;
        }
    }

    .icon{
        font-family: hui;
        padding: 12px;
        &-tool{
            font-size: 55px;
        }
        &-normal{
            font-size: 45px;
        }
    }
    .text-content{
        padding: 10px;
        font-size: 31px;
        width: 100%;
        background-color: #ffffff;
        border-width: 2px;
        border-radius: 8px;
        border-color: @color-border;
    }
    .pick{
        padding: 10px;
    }
    image {
        width: 100%;
        border-radius: 8px;
    }
</style>

<script>
    import ai from '@system.ai'
    import image from '@system.image'
    import media from '@system.media'
    import request from '@system.request'
    import clipboard from '@system.clipboard'

    export default {
        props: {
            size: {
                default: '45'
            },
            color: {
                default: 'sub'
            },
            bgColor: {
                default: 'bg-content'
            },
            uri: {
                default: ''
            },
            show:{
                default: false
            },
            hideBottom:{
                default: false
            },
            copyWithHide:{
                default: false
            }
        },

        data() {
            return {
                supportAI: false,
                isShow: this.show,
                photoUri: this.uri,
                text: '',
                showText: false
            }
        },

        onInit(){
            let _this = this
            ai.canIUse({
                success: function (data) {
                    if(!data.canUse){
                        _this.$child('toast').showToast({
                            text: '您的设备不支持AI',
                            icon: 'warning'
                        })
                    }else{
                        _this.supportAI = true
                    }
                },
                fail: function (data, code) {
                    console.log("handling fail, code: " + code)
                },
                complete: function () {
                    console.log("handling complete")
                }
            })

            //如果是远程图片，则先保存到本地
            if(_this.uri.startsWith('http')){
                request.download({
                    url: _this.uri,
                    success:function(data){
                        // 下载文件，存储在本地
                        request.onDownloadComplete({
                            token:data.token,
                            success: function (ret) {
                                _this.photoUri = ret.uri
                            },
                            fail: function () {
                                _this.$child('toast').showToast({
                                    text: '图片下载失败',
                                    icon: 'warning'
                                })
                            }
                        })
                    },
                    fail: function() {
                        _this.$child('toast').showToast({
                            text: '图片下载失败',
                            icon: 'warning'
                        })
                    }
                })
            }

            _this.$on('pick_dispatchEvt',_this.dispatchPickEvt)
            _this.$on('takephoto_dispatchEvt',_this.dispatchTakePhotoEvt)
        },
        dispatchPickEvt(evt) {
            this.photoUri = evt.detail.pictureUrl
            this.showText = false
        },
        dispatchTakePhotoEvt(evt) {
            this.photoUri = evt.detail.photoUrl
            this.showText = false
        },

        computed: {
            compSize() {
                return 'font-size: ' + this.size + ';'
            },
            maskHeight() {
                return this.hideBottom ? 'bottom:130px;' : 'bottom:0;'
            }
        },

        handleShow() {
            this.isShow = !this.isShow
        },

        //文档校正
        handleRefineDoc() {
            let _this = this
            ai.detectDoc({//文档检测
                uri: _this.photoUri,
                success: function (data) {
                    //文档校正
                    ai.refineDoc({//TODO 该接口似乎有问题
                        uri: _this.photoUri,
                        coordinates: {
                            topLeft: {x : Number(data.topLeft.x), y : Number(data.topLeft.y)},
                            topRight: {x : Number(data.topRight.x), y : Number(data.topRight.y)},
                            bottomLeft: {x : Number(data.bottomLeft.x), y : Number(data.bottomLeft.y)},
                            bottomRight: {x : Number(data.bottomRight.x), y : Number(data.bottomRight.y)}
                        },
                        success: function (data) {
                            _this.photoUri = data.url
                        },
                        fail: function () {
                            _this.$child('toast').showToast({
                                text: '文档校正失败',
                                icon: 'warning'
                            })
                        }
                    })
                },
                fail: function () {
                    _this.$child('toast').showToast({
                        text: '文档检测失败',
                        icon: 'warning'
                    })
                }
            })
        },

        //图片裁剪
        handleEditImage(){
            let _this = this
            image.editImage({
                uri: _this.photoUri,
                success: function(data) {
                    _this.photoUri = data.uri
                    _this.$child('toast').showToast({
                        text: '文档已裁剪',
                        icon: 'ok'
                    })
                },
                fail: function(data, code) {
                    _this.$child('toast').showToast({
                        text: '文档裁剪失败',
                        icon: 'warning'
                    })
                }
            })
        },

        //文档识别
        handleDetectText() {
            let _this = this
            _this.$child('toast').showToast({
                text: '提取文字...',
                loading: true
            })
            ai.detectText({
                uri: _this.photoUri,
                level: 0,
                success: function (data) {
                    _this.$child('toast').showToast({
                        text: '文档识别成功',
                        icon: 'ok'
                    })

                    _this.text = data.value
                    _this.showText = true
                },
                fail: function (data, code) {
                    _this.$child('toast').showToast({
                        text: '文档识别失败',
                        icon: 'warning'
                    })
                }
            })
        },

        //图片保存到本地
        handleSave() {
            let _this = this
            media.saveToPhotosAlbum({
                uri: _this.photoUri,
                success: function() {
                    _this.$child('toast').showToast({
                        text: '图片保存成功',
                        icon: 'ok'
                    })
                },
                fail: function(data, code) {
                    _this.$child('toast').showToast({
                        text: '图片保存失败',
                        icon: 'warning'
                    })
                }
            })
        },

        //复制文字到剪贴板
        handleCopy() {
            clipboard.set({
                text: this.text
            })

            this.$child('toast').showToast({
                text: '已复制到剪贴板',
                icon: 'ok'
            })

            if(this.copyWithHide){
                this.isShow = false
            }
        }
    }
</script>
