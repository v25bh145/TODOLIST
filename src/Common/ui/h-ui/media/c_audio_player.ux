/**
* Copyright 2019 H-UI [ @author Mac.Manon @email fastapp@139.com ]
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use
* this file except in compliance with the License.  You may obtain a copy of the
* License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed
* under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
* CONDITIONS OF ANY KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations under the License.
*
*/

<import name="icon" src="../basic/c_icon"></import>
<template>
    <div class="audio" style="{{hStyle}}">
        <div class="audio-menu" onclick="switchPlay">
            <icon if="{{!playStatus}}" type="play-sign" size="60"></icon>
            <icon if="{{playStatus}}" type="pause-sign" size="60"></icon>
        </div>
        <text class="audio-duration">{{totalTime}}/{{spendTime}}</text>
        <!-- 使用slider组件模拟播放进度 -->
        <slider class="audio-slider" min="0" max="{{duration}}" step="1" value="{{currentTime}}" onchange="sliderChange"></slider>
    </div>
</template>

<style lang="less">
    .audio {
        flex-direction: row;
        width: 684px;
        background-color: #dddddd;
        align-items: center;
        &-menu {
            width: 100px;
            justify-content: center;
        }
        &-duration {
            height: 120px;
            text-align: center;
            font-size: 25px;
            width: 200px;
            color: #000000;
        }
        &-slider {
            color: #FFFFFF;
            padding-left: 20px;
            width: 100%;
        }
    }
</style>

<script>
    import audio from '@system.audio'

    export default {
        props: {
            src: {},
            hStyle:{
                default: ''
            }
        },
        data() {
            return {
                playStatus: false,
                duration: 100,
                spendTime: '00:00',
                totalTime: '00:00',
                currentTime: 0
            }
        },
        onReady () {
            audio.src = this.src
            audio.autoplay = false
            const _this = this
            // 播放触发
            audio.onloadeddata = function () {
                // 循环播放
                audio.loop = false
                _this.duration = audio.duration
                _this.totalTime = _this.formatTime(audio.duration)
            }
            // 添加监听
            // currentTime变化时触发
            audio.ontimeupdate = function () {
                _this.updateAudio()
            }
            // 暂停时触发
            audio.onpause = function () {
                _this.status = 'audio pause'
                console.info('pause')
            }
            // 播放完毕触发
            audio.onended = function () {
                // 图标回到可播放状态
                _this.status = 'audio end'
                _this.playStatus = false
            }
            // 出错时触发
            audio.onerror = function () {
                _this.status = 'audio error'
                console.info('error')
            }
            // 播放时长变化触发
            audio.ondurationchange = function () {
                console.info('change')
            }
            // 播放时触发
            audio.onplay = function () {
                _this.status = 'audio play'
                _this.playStatus = true
            }
        },
        switchPlay () {
            if (!this.playStatus) {
                // 开始播放
                audio.play()
            } else {
                // 暂停播放
                audio.pause()
            }
            this.playStatus = !this.playStatus
        },
        sliderChange (e) {
            const value = e.progress - audio.currentTime
            // 相差三秒则判定为拖动进度，同时反应到原生audio组件上
            if(value > 1 || value < -1) {
                audio.currentTime = e.progress
                // 拖动后会触发自动播放，显示播放中按钮
                this.playStatus = false
            }
        },
        updateAudio () {
            // 更新播放时间
            const time = audio.currentTime
            this.currentTime = time
            this.spendTime = this.formatTime(time)
        },
        // 格式化返回时间
        formatTime (time) {
            const s = parseInt(time)
            if(!s) {return '00:00'}
            const m = parseInt(s/60)
            const se = s%60
            const min = m >= 10 ? m : '0' + m
            const sec = se >= 10 ? se : '0' + se
            return min + ':' + sec
        }
    }
</script>
