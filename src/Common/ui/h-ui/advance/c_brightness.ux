/**
* Copyright 2019 H-UI [ @author Mac.Manon @email fastapp@139.com ]
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use
* this file except in compliance with the License.  You may obtain a copy of the
* License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed
* under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
* CONDITIONS OF ANY KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations under the License.
*
*/

<import name="toast" src="../feedback/c_toast"></import>
<template>
    <div class="brightness" style="{{hStyle}}">
        <text class="icon {{type + '-icon'}}">&#xe729;</text>
        <slider id="{{id}}" class="brightness-slider {{type}}" min="0" max="255" value="{{compValue}}" onchange="getValue('compValue')"></slider>
        <text class="{{type + '-icon'}}">{{compValue}}</text>
        <toast id="{{id + '_toast'}}"></toast>
    </div>
</template>

<style lang="less">
    @import '../../../styles/variables.less';

    @font-face {
        font-family: hui;
        src: url('https://h-ui.obs.cn-south-1.myhuaweicloud.com/font/hui.ttf');
    }

    .icon {
        font-family: hui;
    }

    .brightness{
        width: 684px;
        margin: 10px 0;
        align-items: center;
        justify-content: space-between;
        &-slider{
            flex: 1;
            width:500px;
            margin: 0 5px;
        }

    }

    .default{
        selected-color: @color-black;
        block-color: @color-black;
    }
    .primary{
        selected-color: @color-primary;
        block-color: @color-primary;
    }
    .info{
        selected-color: @color-info;
        block-color: @color-info;
    }
    .warning{
        selected-color: @color-warning;
        block-color: @color-warning;
    }
    .danger{
        selected-color: @color-danger;
        block-color: @color-danger;
    }
    .success{
        selected-color: @color-success;
        block-color: @color-success;
    }

    .default-icon{
        color: @color-black;
    }
    .primary-icon{
        color: @color-primary;
    }
    .info-icon{
        color: @color-info;
    }
    .warning-icon{
        color: @color-warning;
    }
    .danger-icon{
        color: @color-danger;
    }
    .success-icon{
        color: @color-success;
    }
</style>

<script>
    import brightness from '@system.brightness'

    export default {
        props: {
            id: {},
            type: {
                default: 'info'
            },
            showToast: {
                default: false
            },
            hStyle:{
                default: ''
            }
        },

        data: {
            compValue: 0,
            active: false,
            params: {}
        },

        onInit() {
            let _this = this
            brightness.getValue({
                success: function(data) {
                    _this.compValue = data.value

                    if(_this.showToast){
                        _this.$child(_this.id + '_toast').showToast({
                            text: '当前亮度:' + _this.compValue,
                            icon: 'brightness'
                        })
                    }

                    _this.$dispatch(_this.id + '_dispatchEvt', {
                        value: _this.compValue
                    })
                },
                fail: function(data, code) {
                    console.log(`handling fail, code = ${code}`)
                }
            })
        },

        getValue (name, evt) {
            let _this = this
            _this[name] = evt.progress

            brightness.setValue({
                value: _this.compValue,
                success: function() {
                    if(_this.showToast){
                        _this.$child(_this.id + '_toast').showToast({
                            text: '当前亮度:' + _this.compValue,
                            icon: 'brightness'
                        })
                    }

                    _this.$dispatch(_this.id + '_dispatchEvt', {
                        value: _this.compValue
                    })
                },
                fail: function(data, code) {
                    _this.$child(_this.id + '_toast').showToast({
                        text: '设置亮度失败',
                        icon: 'warning'
                    })
                    console.log(`handling fail, code = ${code}`)
                }
            })
        }
    }
</script>
