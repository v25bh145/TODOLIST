/**
* Copyright 2019 H-UI [ @author Mac.Manon @email fastapp@139.com ]
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use
* this file except in compliance with the License.  You may obtain a copy of the
* License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed
* under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
* CONDITIONS OF ANY KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations under the License.
*
*/

<import name="flex-row" src="../basic/c_flex_row"></import>
<import name="flex-col" src="../basic/c_flex_col"></import>
<import name="pic" src="../media/c_pic"></import>
<template>
    <div class="form-group" id="{{id}}" style="{{hStyle}}">
        <div>
            <text if="{{compNotBlank && compTitle!==''}}" class="red">* </text>
            <text class="form-group-label-default {{validStyle}}">{{compTitle}}</text>
        </div>

        <div class="container">
            <flex-row wrap="wrap" justify="between">
                <flex-col width="{{colWidth}}" for="{{compData}}" h-style="margin-top: 8px;">
                    <stack style="align-items: flex-start;">
                        <pic if="{{type === 'Image'}}" src="{{$item}}" width="{{picSize}}" height="{{picSize}}" radius="8"></pic>
                        <pic if="{{type === 'Video'}}" src="../../../icons/video.png" width="{{picSize}}" height="{{picSize}}" radius="8"></pic>
                        <pic if="{{type === 'File'}}" src="../../../icons/file.png" width="{{picSize}}" height="{{picSize}}" radius="8"></pic>
                        <text class="icon icon-sm upload-remove" onclick="handleRemove($item)">&#xe719;</text>
                    </stack>
                </flex-col>
                <flex-col width="{{colWidth}}" h-style="margin-top: 8px;">
                    <stack show="{{compShow}}" class="form-control-border-default upload-button" style="{{buttonSize}}" onclick="handleClick">
                        <text show="{{!compWait}}" class="icon icon-lg">&#xe7b6;</text>
                        <progress show="{{compWait}}" class="upload-wait" type="circular"></progress>
                    </stack>
                </flex-col>
            </flex-row>
        </div>

        <div show="{{!!formError}}" class="form-error">
            <text class="icon icon-sm danger">&#xe719;</text>
            <text style="padding-left: 8px;">{{formError}}</text>
        </div>
    </div>
</template>

<style lang="less">
    @import '../../../styles/form.less';

    @font-face {
        font-family: hui;
        src: url('https://h-ui.obs.cn-south-1.myhuaweicloud.com/font/hui.ttf');
    }

    .upload {
        margin-top: 8px;
        &-button{
             justify-content:center;
             align-items: center;
        }
        &-wait{
             width: 60px;
             height: 60px;
        }
        &-remove{
            margin:5px;
        }
    }

    .icon{
        font-family: hui;
        &-sm{
            font-size: 33px;
        }
        &-lg{
            font-size: 60px;
        }
    }
    .success{
        color: @color-success;
    }
    .warning{
        color: @color-warning;
    }
    .danger{
        color: @color-danger;
    }
    .red{
        color: @color-red;
    }
</style>

<script>
    import media from '@system.media'
    import request from '@system.request'
    import { obsConfig } from '../../../utils/config'
    import { getUuid, base64Encode, cryptoBytesToBase64, cryptoHMAC } from '../../../utils/security'

    export default {
        props: {
            id:{},
            params: {},
            title: {
                default: '图片'
            },
            data: {
                default: []
            },
            size: {
                default: 'normal'    //支持:lg,normal,sm
            },
            num: {
                default: 9
            },
            limit: {
                default: 5 * 1024 * 1024 * 1024  //5G
            },
            expiration: {
                default: 5 //令牌失效超时，默认5分钟
            },
            type: {
                default: 'Image'  //上传类型，支持Image，Video，File
            },
            disabled:{
                default: false
            },
            notBlank: {
                default: ''
            },
            valid: {
                default: ''
            },
            formError: {
                default: ''
            },
            hStyle:{
                default: ''
            }
        },

        data() {
            return {
                compData: [],
                newFiles: [],
                compValid: this.valid,
                compInit: true,
                compWait: false,
                errorInfo: '',
                arr: [],
                count: 0,
                err: 0
            }
        },

        onInit() {
            for(var i=0;i<this.data.length;i++){
                this.compData.push(this.data[i])
            }

            // 脏数据处理
            if(this.compData.length > this.num){
                this.compValid = "has-error"
                this.formError = "文件数量超限，最多允许：" + this.num
            }
        },

        computed: {
            compNotBlank() {
                return (this.disabled || this.notBlank==='false') ? false : true
            },
            compTitle() {
                return this.title==='none' ? "" : this.title
            },
            compShow() {
                return this.num > this.compData.length
            },
            picSize(){
                var width = 220
                switch (this.size){
                    case 'lg':
                        width = 334
                        break
                    case 'sm':
                        width = 163
                        break
                    default:
                        width = 220
                        break
                }
                return width
            },
            buttonSize(){
                return 'width: ' + this.picSize + 'px;height: ' + this.picSize + 'px;'
            },
            colWidth(){
                var width = 3
                switch (this.size){
                    case 'lg':
                        width = 6
                        break
                    case 'sm':
                        width = 3
                        break
                    default:
                        width = 4
                        break
                }
                return width
            },
            validStyle() {
                if (this.compValid === 'has-success') {
                    return "success"
                } else if (this.compValid === 'has-warning') {
                    return "warning"
                } else if (this.compValid === 'has-error') {
                    return "danger"
                } else {
                    return (this.compInit || this.compWait || this.valid === 'none') ? "" : "success"
                }
            }
        },

        handleClick () {
            let _this = this
            if(!_this.disabled && !_this.compWait) {
                _this.errorInfo = ""
                switch (_this.type) {
                    case 'Video':
                        if(_this.num - _this.compData.length > 1){
                            media.pickVideos({
                                success:function(data){
                                    _this.batchUpload(_this.multiData(data))
                                }
                            })
                        }else {
                            media.pickVideo({
                                success:function(data){
                                    _this.batchUpload(_this.singleData(data))
                                }
                            })
                        }
                        break
                    case 'File':
                        media.pickFile({
                            success:function(data){
                                _this.batchUpload(_this.singleData(data))
                            }
                        })
                        break
                    default: // Image
                        if(_this.num - _this.compData.length > 1){
                            media.pickImages({
                                success:function(data){
                                    _this.batchUpload(_this.multiData(data))
                                }
                            })
                        }else {
                            media.pickImage({
                                success:function(data){
                                    _this.batchUpload(_this.singleData(data))
                                }
                            })
                        }
                        break
                }

            }
        },

        singleData(data){
            var arr = []
            var name = data.name
            var size = data.size
            var uri = data.uri

            //防止多客户端文件名同名冲突,改用uuid命名
            var uuid = getUuid(true)
            uuid = uuid + name.substr(name.lastIndexOf('.'), name.length)

            // 文件超大记录
            if (size > this.limit) {
                this.errorInfo = '-1'
            }

            var item = {
                name: name,
                size: size,
                uri: uri,
                uuid: uuid
            }
            arr.push(item)

            return arr
        },

        multiData(data){
            var arr = []
            for(var i=0;i<data.files.length;i++){
                var name = data.files[i].name
                var size = data.files[i].size
                var uri = data.files[i].uri

                //防止多客户端文件名同名冲突,改用uuid命名
                var uuid = getUuid(true)
                uuid = uuid + name.substr(name.lastIndexOf('.'), name.length)

                // 文件超大记录
                if (size > this.limit) {
                    if(this.errorInfo !== ''){
                        this.errorInfo += ','
                    }
                    this.errorInfo += (i + 1)
                }

                var item = {
                    name: name,
                    size: size,
                    uri: uri,
                    uuid: uuid
                }
                arr.push(item)
            }
            return arr
        },

        // 多文件上传
        batchUpload(data){
            //存在文件超出大小限制的情况
            if(this.errorInfo !== ''){
                this.compValid = "has-error"

                var limit = ''

                if (this.limit < 1024 * 1024) {
                    limit = Math.floor(this.limit / 1024) + 'K'
                } else if (this.limit >= 1024 * 1024 && this.limit < 1024 * 1024 * 1024) {
                    limit = Math.floor(this.limit / (1024 * 1024)) + 'M'
                } else {
                    limit = (this.limit / (1024 * 1024 * 1024).toFixed(1)) + 'G'
                }

                if(this.errorInfo === '-1'){           //单文件上传模式
                    this.formError = '文件太大。最大允许' + limit + '。'
                }else{                            //多文件上传模式
                    this.formError = '第' + this.errorInfo  + '个文件太大。最大允许' + limit + '。'
                }
            }else{
                if(this.compData.length + data.length > this.num){ //上传数量过多
                    this.compValid = "has-error"
                    this.formError = "文件数量超限，最多允许：" + this.num
                }else{ //文件批量上传

                    this.arr = []
                    this.count = 0
                    this.err = 0

                    //上传流量优化，防止多次上传本地同一文件
                    for(var i=0;i<data.length;i++) {
                        var repeat = false

                        for (var j = 0; j < this.newFiles.length; j++) {
                            if (this.newFiles[j].name === data[i].name) {
                                repeat = true
                            }
                        }
                        if(!repeat){
                            this.arr.push(data[i])
                        }
                    }

                    if(this.arr.length > 0){
                        this.compInit = false
                        this.errorInfo = ""       // 清空错误，用于记录上传失败的情况
                        this.compWait = true
                    }

                    for(i=0;i<this.arr.length;i++){
                        // 超时
                        var current = new Date()
                        current.setTime(current.setMinutes(current.getMinutes() + this.expiration));

                        const OBSPolicy = {                   //设定policy内容
                            "expiration": current,
                            "conditions": [
                                {"bucket": obsConfig.BucketName},
                                {'key': this.arr[i].uuid}
                            ]
                        }

                        const policyEncoded = base64Encode(JSON.stringify(OBSPolicy))                                                //计算policy编码值
                        const signature = cryptoBytesToBase64(cryptoHMAC(policyEncoded, obsConfig.SecretKey, {asBytes: true}))       //计算signature

                        this.upload(this.arr, i, signature, policyEncoded)

                    }
                }
            }
        },

        upload(arr, i, signature, policyEncoded){
            let _this = this
            // 上传下载好的本地文件．其中，data为请求的参数，files为需要上传的文件列表
            request.upload({
                url: obsConfig.EndPoint,
                header: {
                    "Accept-Encoding": "gzip, deflate",
                    "Accept-Language": "zh-CN,en-US;q=0.8,en;q=0.6"
                },
                files: [
                    {
                        uri:arr[i].uri,
                        name:arr[i].uuid,
                        type: "multipart/form-data"
                    }
                ],
                data: [
                    {
                        name: 'AccessKeyID',
                        value: obsConfig.AccessKeyId
                    },
                    {
                        name: 'policy',
                        value: policyEncoded
                    },
                    {
                        name: 'signature',
                        value: signature
                    },
                    {
                        name: 'key',
                        value:arr[i].uuid
                    }
                ],
                success: function (ret) {
                    var remoteUri = ret.headers.Location
                    if(remoteUri !== undefined) {
                        var remoteUuid = remoteUri.substr(remoteUri.lastIndexOf('/') + 1, remoteUri.length)
                        for (var i = 0; i <arr.length; i++) {
                            if (arr[i].uuid === remoteUuid) {
                                _this.newFiles.push(arr[i])
                                break
                            }
                        }

                        _this.compData.push(obsConfig.EndPoint + '/' + remoteUuid)
                    }else{
                        _this.err++
                        _this.errorInfo = _this.err
                    }
                    _this.count++

                    if(_this.count ===arr.length){
                        //存在上传失败的情况
                        if(_this.errorInfo !== ''){

                            _this.compValid = "has-error"

                            if(_this.data.length>1){         //多文件上传模式
                                _this.formError = '有' + _this.errorInfo + '个文件上传失败。'
                            }else{                      //单文件上传模式
                                _this.formError = '文件上传失败。'
                            }
                        }else{
                            _this.compValid = ""
                            _this.formError = ""
                        }

                        _this.$dispatch(_this.id + '_dispatchEvt', {
                            value: _this.compData
                        })
                        _this.params[_this.id] = _this.compData

                        _this.compWait = false
                    }
                },
                fail: function (msg, code) {
                    _this.count++
                    _this.err++
                    _this.errorInfo = _this.err

                    if(_this.count ===arr.length){
                        //存在上传失败的情况
                        if(_this.errorInfo !== ''){

                            _this.compValid = "has-error"

                            if(_this.data.length>1){         //多文件上传模式
                                _this.formError = '有' + _this.errorInfo + '个文件上传失败。'
                            }else{                      //单文件上传模式
                                _this.formError = '文件上传失败。'
                            }
                        }else{
                            _this.compValid = ""
                            _this.formError = ""
                        }

                        _this.$dispatch(_this.id + '_dispatchEvt', {
                            value: _this.compData
                        })
                        _this.params[_this.id] = _this.compData

                        _this.compWait = false
                    }
                }
            })
        },

        handleRemove(str){
            if(str.startsWith('http')) {// 防止删除本地数据
                var arr = []
                var arr2 = []
                var i = 0
                for (i = 0; i < this.compData.length; i++) {
                    if (this.compData[i] !== str) {
                        arr.push(this.compData[i])
                    }
                }
                this.compData = arr

                str = str.substr(str.lastIndexOf('/') + 1, str.length)
                for (i = 0; i < this.newFiles.length; i++) {
                    if (this.newFiles[i].uuid !== str) {
                        arr2.push(this.newFiles[i])
                    }
                }
                this.newFiles = arr2

                if (this.compNotBlank) {
                    if (this.compData.length > 0) {
                        this.compValid = ""
                        this.formError = ""
                    } else {
                        this.compValid = "has-error"
                        this.formError = "必须上传" + this.compTitle
                    }
                } else {
                    this.compValid = ""
                    this.formError = ""
                }

                this.$dispatch(this.id + '_dispatchEvt', {
                    value: this.compData
                })

                this.params[this.id] = this.compData
            }
        }
    }
</script>
