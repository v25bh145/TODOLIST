/**
* Copyright 2019 H-UI [ @author Mac.Manon @email fastapp@139.com ]
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use
* this file except in compliance with the License.  You may obtain a copy of the
* License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed
* under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
* CONDITIONS OF ANY KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations under the License.
*
*/

<import name="icon" src="../basic/c_icon"></import>
<template>
    <div class="form-group" style="{{hStyle}}">
        <div show="{{showTip}}" style="align-items: flex-start;">
            <icon type="tip" color="warning" h-style="margin-top: 6px;"></icon>
            <text class="sub small">{{tip}}</text>
        </div>

        <div class="{{formHorizontalType}} {{noBorder ? 'form-control-no-border' : ''}}">
            <div if="{{formLabelType === 'form-group-label-horizontal'}}"  style="width:35%;">
                <text if="{{compTitle!==''}}" class="red">* </text>
                <label if="{{!!compTitle}}" target="input" class="form-group-label-horizontal {{validStyle}}">{{compTitle}}：</label>
            </div>
            <div if="{{formLabelType === 'form-group-label-default'}}">
                <text if="{{compTitle!==''}}" class="red">* </text>
                <label if="{{!!compTitle}}" target="input" class="form-group-label-default {{validStyle}}">{{compTitle}}</label>
            </div>

            <div class="{{borderType}}" style="{{formHorizontalType==='form-group-horizontal' ? 'width:65%;' : ''}} {{compWidth}}">
                <icon if="{{typeIcon!==''}}" type="{{typeIcon}}" h-style="margin-left: 12px;width:36px;"></icon>
                <text if="{{!stepButton && compTitle===''}}" class="red"> * </text>
                <icon if="{{stepButton}}" type="minus-sign" h-style="margin-left: 12px;width:56px;" onclick="handleMinus"></icon>
                <input type="{{type}}" id="{{id}}" name="{{name}}" class="{{formControlType}}" style="{{compAlign}}"
                        maxlength="{{maxlength}}" value="{{compValue}}"
                        onchange="handleChange" onfocus="handleFocus" onblur="handleBlur">
                </input>
                <icon if="{{stepButton}}" type="plus-sign" h-style="margin-right: 12px;width:56px;" onclick="handlePlus"></icon>
                <icon if="{{compValidIcon && this.compValid==='has-success'}}" type="ok" color="success" h-style="margin-right: 12px;width:56px;"></icon>
                <icon if="{{compValidIcon && this.compValid==='has-warning'}}" type="warning" color="warning" h-style="margin-right: 12px;width:56px;"></icon>
                <icon if="{{compValidIcon && this.compValid==='has-error'}}" type="remove" color="danger" h-style="margin-right: 12px;width:56px;"></icon>
            </div>
        </div>

        <div show="{{!!formError}}" class="form-error">
            <icon type="remove-sign" color="danger"></icon>
            <text style="padding-left: 8px;">{{formError}}</text>
        </div>
    </div>
</template>

<style lang="less">
    @import '../../../styles/form.less';

    .success{
        color: @color-success;
    }
    .warning{
        color: @color-warning;
    }
    .danger{
        color: @color-danger;
    }
    .red{
        color: @color-red;
    }
</style>

<script>
    export default {
        props: {
            id:{},
            params: {},
            min: {
                // 最小值 @Range(min=value,max=value)
                default: 0
            },
            max: {
                // 最大值 @Range(min=value,max=value)
                default: 2147483647
            },
            stepButton: {
                // 递增、递减(按钮)
                default: false
            },
            step: {
                // 加减按钮点击一次的增减数量
                default: 1
            },
            width: {
                default: ''
            },
            type: {
                default: 'number'
            },
            typeIcon: {
                default: ''
            },
            noBorder: {
                default: false
            },
            formHorizontal: {
                default: false
            },
            title: {
                default: '数量'
            },
            name: {
                default: ''
            },
            focus: {
                default: false
            },
            maxlength: {
                default: -1
            },
            value: {
                default: '0'
            },
            alignRight: {
                default: false
            },
            tip: {
                default: ''
            },
            valid: {
                default: ''
            },
            validIcon: {
                default: false
            },
            pattern: {
                default: ''
            },
            formError: {
                default: ''
            },
            hStyle:{
                default: ''
            }
        },

        data() {
            return {
                compValue: this.value,
                compValid: this.valid,
                compValidIcon: this.validIcon,
                compFocus: this.focus,
                showTip: false,
                showRemoteError:true,
                compInit: true
            }
        },

        onReady() {
            if (!this.compFocus) {return;}
            this.$element(this.id).focus({focus: this.compFocus})
        },

        // 递减
        handleMinus(event) {
            if(Number(this.compValue) - Number(this.step) >= Number(this.min)){
                this.compValue = Number(this.compValue) - Number(this.step)
            }else{
                this.compValue = this.min
            }
            this.$element(this.id).focus({focus: false})
            this.$dispatch(this.id + '_dispatchEvt', {
                value: this.compValue
            })
        },

        // 递增
        handlePlus(event) {
            if(Number(this.compValue) + Number(this.step) <= Number(this.max)){
                this.compValue = Number(this.compValue) + Number(this.step)
            }else{
                this.compValue = this.max
            }
            this.$element(this.id).focus({focus: false})
            this.$dispatch(this.id + '_dispatchEvt', {
                value: this.compValue
            })
        },

        handleChange(e) {
            this.compValue = e.value

            this.validData()

            if(this.compValue!==''){
                // 输入值大于允许的最大值时自动校正
                if(Number(this.compValue) >= Number(this.max)){
                    this.compValue = this.max
                }
                // 输入值小于允许的最小值时自动校正
                if(Number(this.compValue) <= Number(this.min)){
                    this.compValue = this.min
                }
            }

            if(!this.compInit) {
                this.$dispatch(this.id + '_dispatchEvt', {
                    value: this.compValue
                })
                this.params[this.id] = this.compValue
            }
        },

        handleFocus(e) {
            this.compFocus = true
            this.compValid = ""
            this.showRemoteError=false
            if(this.tip!==''){
                this.showTip = true
            }

            // 修复疑似官方bug,默认值为1位数时，如果删除该数字，无法触发change事件。因此无法触发非空校验。
            if(this.compInit){
                this.compValue = Number(this.compValue) + 1
                this.compValue = Number(this.compValue) - 1
                this.compInit = false
            }

            // 输入值大于允许的最大值时自动校正
            if(Number(this.compValue) >= Number(this.max)){
                this.compValue = this.max
            }
            // 输入值小于允许的最小值时自动校正
            if(Number(this.compValue) <= Number(this.min)){
                this.compValue = this.min
            }

            this.$dispatch(this.id + '_dispatchFocusEvt', e)
        },

        handleBlur(e) {
            this.compFocus = false
            this.showTip = false
            this.validData()
            this.$dispatch(this.id + '_dispatchBlurEvt', e)
        },

        // 数据校验
        validData() {
            if (this.compValue === '') {
                this.compValid = 'has-error'
                this.formError = '该字段不能为空！'
            } else {
                if (this.pattern !== '') {
                    var patt = new RegExp(this.pattern);
                    var r = String(this.compValue).match(patt);
                    if (r === null) {
                        this.compValid = 'has-error'
                        this.formError = '输入的格式不正确！'
                    } else {
                        if (!this.showRemoteError) {
                            this.compValid = 'has-success'
                            this.formError = ''
                        }
                    }
                } else {
                    if (!this.showRemoteError) {
                        this.compValid = 'has-success'
                        this.formError = ''
                    }
                }
            }
        },

        computed: {
            formHorizontalType() {
                return this.formHorizontal ? "form-group-horizontal" : "form-group-default"
            },
            formLabelType() {
                return this.formHorizontal ? "form-group-label-horizontal" : "form-group-label-default"
            },
            formControlType() {
                return this.formHorizontal ? "form-group-control-horizontal" : "form-group-control-default"
            },
            borderType() {
                if(this.noBorder){
                    return ''
                }else{
                    if(this.compFocus){
                        return 'form-control-focus'
                    }

                    if(this.valid === 'none'){
                        return "form-control-border-default"
                    }else {
                        if (this.formError !== '') {
                            return 'has-error'
                        } else {
                            if (this.compValid === 'has-success') {
                                return 'has-success'
                            } else if (this.compValid === 'has-warning') {
                                return 'has-warning'
                            } else if (this.compValid === 'has-error') {
                                return 'has-error'
                            } else {
                                return "form-control-border-default"
                            }
                        }
                    }
                }
            },
            validStyle() {
                if(this.valid === 'none'){
                    return ""
                }else {
                    if (this.compValid === 'has-success') {
                        return "success"
                    } else if (this.compValid === 'has-warning') {
                        return "warning"
                    } else if (this.compValid === 'has-error') {
                        return "danger"
                    } else {
                        return ""
                    }
                }
            },

            compTitle() {
                return this.title==='none' ? '' : this.title
            },

            // 数字组件宽度优化处理
            compWidth() {
                return this.width==='' ? '' : 'width:'+this.width+'px;';
            },

            // 数字组件对齐优化处理，带递增递减按钮时优先居中对齐
            compAlign() {
                if(this.alignRight){
                    return "text-align:right;"
                }else{
                    return this.stepButton ? 'text-align:center;' : 'text-align:left;'
                }
            }
        }
    }
</script>
