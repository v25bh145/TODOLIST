/**
* Copyright 2019 H-UI [ @author Mac.Manon @email fastapp@139.com ]
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use
* this file except in compliance with the License.  You may obtain a copy of the
* License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed
* under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
* CONDITIONS OF ANY KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations under the License.
*
*/

<template>
    <div class="canvas-container" style="{{hStyle}}">
        <canvas id="{{id}}" onclick="handleClick"></canvas>
    </div>
</template>

<style>
    .canvas-container {
        flex-direction: column;
        align-items: center;
    }
    canvas {
        width: 300px;
        height: 60px;
    }
</style>

<script>
    import { random } from '../../../utils/number'
    import { randomString, randomColor } from '../../../utils/string'

    export default {
        props: {
            id :{},
            data: {},
            color: {
                default: ''
            },
            hStyle:{
                default: ''
            }
        },

        onInit(){
            setTimeout(() => {
                this.drawChart()
            }, 100);
        },

        drawChart(){
            // 获取上下文
            var canvas=this.$element(this.id)
            var ctx=canvas.getContext("2d")

            // 清理画布
            ctx.clearRect(0, 0, 300, 60)

            // 背景色
            ctx.fillStyle = (this.color === '') ? randomColor(180, 240, 0.9) : this.color
            ctx.fillRect(0, 0, 300, 60)

            // 文字
            var code = randomString(6)
            var x = 50
            var i=0
            for(i=0;i<6;i++){
                var deg = random(-6, 6)
                ctx.fillStyle = randomColor(0, 100, 0.7);
                ctx.font = '30px'
                ctx.rotate((deg * Math.PI) / 180);
                ctx.fillText(code[i], x, 35);
                ctx.rotate((-deg * Math.PI) / 180);
                x += 35
            }

            // 干扰
            for(i = 0; i < 20; i++) {
                ctx.strokeStyle = randomColor(50, 150, 0.5);
                ctx.beginPath();
                ctx.moveTo(random(0, 300), random(0, 60));
                ctx.lineTo(random(0, 300), random(0, 60));
                ctx.stroke();
            }

            this.$dispatch(this.id + '_dispatchEvt', {
                value: code
            })
        },

        handleClick() {
            this.drawChart()
        }
    }
</script>